{"basic_builder": {"appname": "TA-otx", "friendly_name": "Add-on for Open Threat Exchange", "version": "3.0.0", "author": "Luke Monahan <luke.monahan@tesserent.com>", "description": "This is a modular input which collects data from Open Threat Exchange for indexing in Splunk", "theme": "#65A637", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "4.1.1", "tab_build_no": "0", "build_no": 3}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "otx:pulse", "interval": "3600", "use_external_validation": true, "streaming_mode_xml": true, "name": "otx", "title": "Open Threat Exchange Indicators", "description": "", "type": "customized", "parameters": [{"required": true, "name": "api_key", "label": "OTX API key", "placeholder": "", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": "45871306cd4aa93992720fd5ab6950804c3a8d2a3b1de3dd50e34db9d81e7019"}, {"required": false, "name": "backfill_days", "label": "Backfill days", "default_value": "30", "placeholder": "", "help_string": "Number of days to backfill pulses and indicators for the first time the input runs", "type": "text", "format_type": "text", "value": "30"}], "data_inputs_options": [{"type": "customized_var", "name": "api_key", "title": "OTX API key", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "backfill_days", "title": "Backfill days", "description": "Number of days to backfill pulses and indicators for the first time the input runs", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "30", "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport os\nimport sys\nimport time\nimport datetime\n\nimport json\nimport hashlib\nimport calendar\nfrom datetime import datetime, timedelta\n\n\ndef utc_to_local(utc_dt):\n    timestamp = calendar.timegm(utc_dt.timetuple())\n    local_dt = datetime.fromtimestamp(timestamp)\n    assert utc_dt.resolution >= timedelta(microseconds=1)\n    return local_dt.replace(microsecond=utc_dt.microsecond)\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    #api_key = definition.parameters.get('api_key', None)\n    #backfill_days = definition.parameters.get('backfill_days', None)\n    pass\n\ndef collect_events(helper, ew):\n\n    api_key = helper.get_arg('api_key')\n    backfill_days = int(helper.get_arg('backfill_days'))\n\n    run_time = time.time()\n\n    last_ran = helper.get_check_point(hashlib.md5(helper.get_input_stanza_names().encode()).hexdigest())\n\n    if last_ran is None:\n      # Might be a migration from old version:\n      last_ran = helper.get_check_point('last_ran')\n      helper.delete_check_point('last_ran')\n\n\n    if last_ran is not None:\n      since = datetime.utcfromtimestamp(last_ran)\n    else:\n      since = datetime.now() - timedelta(days = backfill_days)\n\n    helper.log_info(\"Retrieving subscribed pulses since: %s\" % str(since))\n\n    response = helper.send_http_request(\n      'https://otx.alienvault.com/api/v1/pulses/subscribed',\n        'GET',\n        parameters = {'modified_since' : since },\n        headers = { 'X-OTX-API-KEY' : api_key },\n        verify=True,\n        use_proxy=True\n    )\n\n    response.raise_for_status()\n\n    pulses = response.json()['results']\n    \n    pulse_count = 0\n    indicator_count = 0\n    for pulse in pulses:\n\n        indicators = pulse.pop('indicators', None)\n\n        timeparts = pulse['modified'].split('.')\n        time_parsed = utc_to_local(datetime.strptime(timeparts[0], \"%Y-%m-%dT%H:%M:%S\"))\n        xtime = time.mktime(time_parsed.timetuple())\n\n        e = helper.new_event(\n            data = json.dumps(pulse),\n            time = xtime,\n            sourcetype = \"otx:pulse\",\n            index = helper.get_output_index(),\n            done = True\n    )\n        ew.write_event(e)\n\n        pulse_count = pulse_count + 1\n\n        for indicator in indicators:\n            indicator['pulse_id'] = pulse['id']\n\n            timeparts = indicator['created'].split('.')\n            time_parsed = utc_to_local(datetime.strptime(timeparts[0], \"%Y-%m-%dT%H:%M:%S\"))\n            xtime = time.mktime(time_parsed.timetuple())\n\n            e = helper.new_event(\n                data = json.dumps(indicator),\n                time = xtime,\n                sourcetype = \"otx:indicator\",\n                index = helper.get_output_index(),\n                done = True\n            )\n            ew.write_event(e)\n\n            indicator_count = indicator_count + 1\n\n    helper.log_info(\"Completed polling. Logged %d pulses and %d indicators.\" % (pulse_count, indicator_count))\n\n    helper.save_check_point(hashlib.md5(helper.get_input_stanza_names().encode()).hexdigest(), run_time)", "customized_options": [{"name": "backfill_days", "value": "30"}], "uuid": "ef6b6083e8f8489e81a54c0bd4f4f565", "sample_count": "5"}]}, "field_extraction_builder": {"otx:indicator": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {}}}, "sourcetype_builder": {"otx:pulse": {"metadata": {"event_count": 0, "data_input_name": "otx", "extractions_count": 0, "cims_count": 0}}, "otx:indicator": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_finished", "validation_id": "v_1663135611_7", "progress": 1.0}}